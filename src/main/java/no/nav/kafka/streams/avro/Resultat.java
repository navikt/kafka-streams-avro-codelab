/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.kafka.streams.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Resultat extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -7408087030288137048L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Resultat\",\"namespace\":\"no.nav.kafka.streams.avro\",\"fields\":[{\"name\":\"stedsnavn\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"teller\",\"type\":\"long\"}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<Resultat> ENCODER =
        new BinaryMessageEncoder<Resultat>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<Resultat> DECODER =
        new BinaryMessageDecoder<Resultat>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<Resultat> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<Resultat> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<Resultat>(MODEL$, SCHEMA$, resolver);
    }

    /** Serializes this Resultat to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /** Deserializes a Resultat from a ByteBuffer. */
    public static Resultat fromByteBuffer(
        java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    @Deprecated public java.lang.String stedsnavn;
    @Deprecated public long teller;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Resultat() {}

    /**
     * All-args constructor.
     * @param stedsnavn The new value for stedsnavn
     * @param teller The new value for teller
     */
    public Resultat(java.lang.String stedsnavn, java.lang.Long teller) {
        this.stedsnavn = stedsnavn;
        this.teller = teller;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return stedsnavn;
            case 1: return teller;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: stedsnavn = (java.lang.String)value$; break;
            case 1: teller = (java.lang.Long)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'stedsnavn' field.
     * @return The value of the 'stedsnavn' field.
     */
    public java.lang.String getStedsnavn() {
        return stedsnavn;
    }

    /**
     * Sets the value of the 'stedsnavn' field.
     * @param value the value to set.
     */
    public void setStedsnavn(java.lang.String value) {
        this.stedsnavn = value;
    }

    /**
     * Gets the value of the 'teller' field.
     * @return The value of the 'teller' field.
     */
    public java.lang.Long getTeller() {
        return teller;
    }

    /**
     * Sets the value of the 'teller' field.
     * @param value the value to set.
     */
    public void setTeller(java.lang.Long value) {
        this.teller = value;
    }

    /**
     * Creates a new Resultat RecordBuilder.
     * @return A new Resultat RecordBuilder
     */
    public static no.nav.kafka.streams.avro.Resultat.Builder newBuilder() {
        return new no.nav.kafka.streams.avro.Resultat.Builder();
    }

    /**
     * Creates a new Resultat RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Resultat RecordBuilder
     */
    public static no.nav.kafka.streams.avro.Resultat.Builder newBuilder(no.nav.kafka.streams.avro.Resultat.Builder other) {
        return new no.nav.kafka.streams.avro.Resultat.Builder(other);
    }

    /**
     * Creates a new Resultat RecordBuilder by copying an existing Resultat instance.
     * @param other The existing instance to copy.
     * @return A new Resultat RecordBuilder
     */
    public static no.nav.kafka.streams.avro.Resultat.Builder newBuilder(no.nav.kafka.streams.avro.Resultat other) {
        return new no.nav.kafka.streams.avro.Resultat.Builder(other);
    }

    /**
     * RecordBuilder for Resultat instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Resultat>
        implements org.apache.avro.data.RecordBuilder<Resultat> {

        private java.lang.String stedsnavn;
        private long teller;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(no.nav.kafka.streams.avro.Resultat.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.stedsnavn)) {
                this.stedsnavn = data().deepCopy(fields()[0].schema(), other.stedsnavn);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.teller)) {
                this.teller = data().deepCopy(fields()[1].schema(), other.teller);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing Resultat instance
         * @param other The existing instance to copy.
         */
        private Builder(no.nav.kafka.streams.avro.Resultat other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.stedsnavn)) {
                this.stedsnavn = data().deepCopy(fields()[0].schema(), other.stedsnavn);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.teller)) {
                this.teller = data().deepCopy(fields()[1].schema(), other.teller);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'stedsnavn' field.
         * @return The value.
         */
        public java.lang.String getStedsnavn() {
            return stedsnavn;
        }

        /**
         * Sets the value of the 'stedsnavn' field.
         * @param value The value of 'stedsnavn'.
         * @return This builder.
         */
        public no.nav.kafka.streams.avro.Resultat.Builder setStedsnavn(java.lang.String value) {
            validate(fields()[0], value);
            this.stedsnavn = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'stedsnavn' field has been set.
         * @return True if the 'stedsnavn' field has been set, false otherwise.
         */
        public boolean hasStedsnavn() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'stedsnavn' field.
         * @return This builder.
         */
        public no.nav.kafka.streams.avro.Resultat.Builder clearStedsnavn() {
            stedsnavn = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'teller' field.
         * @return The value.
         */
        public java.lang.Long getTeller() {
            return teller;
        }

        /**
         * Sets the value of the 'teller' field.
         * @param value The value of 'teller'.
         * @return This builder.
         */
        public no.nav.kafka.streams.avro.Resultat.Builder setTeller(long value) {
            validate(fields()[1], value);
            this.teller = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'teller' field has been set.
         * @return True if the 'teller' field has been set, false otherwise.
         */
        public boolean hasTeller() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'teller' field.
         * @return This builder.
         */
        public no.nav.kafka.streams.avro.Resultat.Builder clearTeller() {
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public Resultat build() {
            try {
                Resultat record = new Resultat();
                record.stedsnavn = fieldSetFlags()[0] ? this.stedsnavn : (java.lang.String) defaultValue(fields()[0]);
                record.teller = fieldSetFlags()[1] ? this.teller : (java.lang.Long) defaultValue(fields()[1]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<Resultat>
        WRITER$ = (org.apache.avro.io.DatumWriter<Resultat>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
        throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<Resultat>
        READER$ = (org.apache.avro.io.DatumReader<Resultat>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
        throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
