/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.nav.kafka.streams.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Poststed extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1559863451935034408L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Poststed\",\"namespace\":\"no.nav.kafka.streams.avro\",\"fields\":[{\"name\":\"postnummer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"stedsnavn\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"teller\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Poststed> ENCODER =
      new BinaryMessageEncoder<Poststed>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Poststed> DECODER =
      new BinaryMessageDecoder<Poststed>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Poststed> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Poststed> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Poststed>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Poststed to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Poststed from a ByteBuffer. */
  public static Poststed fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String postnummer;
  @Deprecated public java.lang.String stedsnavn;
  @Deprecated public java.lang.String teller;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Poststed() {}

  /**
   * All-args constructor.
   * @param postnummer The new value for postnummer
   * @param stedsnavn The new value for stedsnavn
   * @param teller The new value for teller
   */
  public Poststed(java.lang.String postnummer, java.lang.String stedsnavn, java.lang.String teller) {
    this.postnummer = postnummer;
    this.stedsnavn = stedsnavn;
    this.teller = teller;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0: return postnummer;
      case 1: return stedsnavn;
      case 2: return teller;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0: postnummer = (java.lang.String)value$; break;
      case 1: stedsnavn = (java.lang.String)value$; break;
      case 2: teller = (java.lang.String)value$; break;
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'postnummer' field.
   * @return The value of the 'postnummer' field.
   */
  public java.lang.String getPostnummer() {
    return postnummer;
  }

  /**
   * Sets the value of the 'postnummer' field.
   * @param value the value to set.
   */
  public void setPostnummer(java.lang.String value) {
    this.postnummer = value;
  }

  /**
   * Gets the value of the 'stedsnavn' field.
   * @return The value of the 'stedsnavn' field.
   */
  public java.lang.String getStedsnavn() {
    return stedsnavn;
  }

  /**
   * Sets the value of the 'stedsnavn' field.
   * @param value the value to set.
   */
  public void setStedsnavn(java.lang.String value) {
    this.stedsnavn = value;
  }

  /**
   * Gets the value of the 'teller' field.
   * @return The value of the 'teller' field.
   */
  public java.lang.String getTeller() {
    return teller;
  }

  /**
   * Sets the value of the 'teller' field.
   * @param value the value to set.
   */
  public void setTeller(java.lang.String value) {
    this.teller = value;
  }

  /**
   * Creates a new Poststed RecordBuilder.
   * @return A new Poststed RecordBuilder
   */
  public static no.nav.kafka.streams.avro.Poststed.Builder newBuilder() {
    return new no.nav.kafka.streams.avro.Poststed.Builder();
  }

  /**
   * Creates a new Poststed RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Poststed RecordBuilder
   */
  public static no.nav.kafka.streams.avro.Poststed.Builder newBuilder(no.nav.kafka.streams.avro.Poststed.Builder other) {
    return new no.nav.kafka.streams.avro.Poststed.Builder(other);
  }

  /**
   * Creates a new Poststed RecordBuilder by copying an existing Poststed instance.
   * @param other The existing instance to copy.
   * @return A new Poststed RecordBuilder
   */
  public static no.nav.kafka.streams.avro.Poststed.Builder newBuilder(no.nav.kafka.streams.avro.Poststed other) {
    return new no.nav.kafka.streams.avro.Poststed.Builder(other);
  }

  /**
   * RecordBuilder for Poststed instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Poststed>
      implements org.apache.avro.data.RecordBuilder<Poststed> {

    private java.lang.String postnummer;
    private java.lang.String stedsnavn;
    private java.lang.String teller;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.nav.kafka.streams.avro.Poststed.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.postnummer)) {
        this.postnummer = data().deepCopy(fields()[0].schema(), other.postnummer);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stedsnavn)) {
        this.stedsnavn = data().deepCopy(fields()[1].schema(), other.stedsnavn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.teller)) {
        this.teller = data().deepCopy(fields()[2].schema(), other.teller);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Poststed instance
     * @param other The existing instance to copy.
     */
    private Builder(no.nav.kafka.streams.avro.Poststed other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.postnummer)) {
        this.postnummer = data().deepCopy(fields()[0].schema(), other.postnummer);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.stedsnavn)) {
        this.stedsnavn = data().deepCopy(fields()[1].schema(), other.stedsnavn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.teller)) {
        this.teller = data().deepCopy(fields()[2].schema(), other.teller);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Gets the value of the 'postnummer' field.
     * @return The value.
     */
    public java.lang.String getPostnummer() {
      return postnummer;
    }

    /**
     * Sets the value of the 'postnummer' field.
     * @param value The value of 'postnummer'.
     * @return This builder.
     */
    public no.nav.kafka.streams.avro.Poststed.Builder setPostnummer(java.lang.String value) {
      validate(fields()[0], value);
      this.postnummer = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'postnummer' field has been set.
     * @return True if the 'postnummer' field has been set, false otherwise.
     */
    public boolean hasPostnummer() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'postnummer' field.
     * @return This builder.
     */
    public no.nav.kafka.streams.avro.Poststed.Builder clearPostnummer() {
      postnummer = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'stedsnavn' field.
     * @return The value.
     */
    public java.lang.String getStedsnavn() {
      return stedsnavn;
    }

    /**
     * Sets the value of the 'stedsnavn' field.
     * @param value The value of 'stedsnavn'.
     * @return This builder.
     */
    public no.nav.kafka.streams.avro.Poststed.Builder setStedsnavn(java.lang.String value) {
      validate(fields()[1], value);
      this.stedsnavn = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'stedsnavn' field has been set.
     * @return True if the 'stedsnavn' field has been set, false otherwise.
     */
    public boolean hasStedsnavn() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'stedsnavn' field.
     * @return This builder.
     */
    public no.nav.kafka.streams.avro.Poststed.Builder clearStedsnavn() {
      stedsnavn = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'teller' field.
     * @return The value.
     */
    public java.lang.String getTeller() {
      return teller;
    }

    /**
     * Sets the value of the 'teller' field.
     * @param value The value of 'teller'.
     * @return This builder.
     */
    public no.nav.kafka.streams.avro.Poststed.Builder setTeller(java.lang.String value) {
      validate(fields()[2], value);
      this.teller = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'teller' field has been set.
     * @return True if the 'teller' field has been set, false otherwise.
     */
    public boolean hasTeller() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'teller' field.
     * @return This builder.
     */
    public no.nav.kafka.streams.avro.Poststed.Builder clearTeller() {
      teller = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Poststed build() {
      try {
        Poststed record = new Poststed();
        record.postnummer = fieldSetFlags()[0] ? this.postnummer : (java.lang.String) defaultValue(fields()[0]);
        record.stedsnavn = fieldSetFlags()[1] ? this.stedsnavn : (java.lang.String) defaultValue(fields()[1]);
        record.teller = fieldSetFlags()[2] ? this.teller : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Poststed>
      WRITER$ = (org.apache.avro.io.DatumWriter<Poststed>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
      throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Poststed>
      READER$ = (org.apache.avro.io.DatumReader<Poststed>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
      throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
